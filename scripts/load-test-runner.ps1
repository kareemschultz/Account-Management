# ESM Platform - PowerShell Load Test Runner\r\n# Comprehensive load testing automation for Windows environments\r\n\r\nparam(\r\n    [Parameter(Mandatory=$false)]\r\n    [string]$BaseUrl = \"http://localhost:3000\",\r\n    \r\n    [Parameter(Mandatory=$false)]\r\n    [int]$MaxUsers = 300,\r\n    \r\n    [Parameter(Mandatory=$false)]\r\n    [int]$Duration = 300,\r\n    \r\n    [Parameter(Mandatory=$false)]\r\n    [string]$TestType = \"full\",\r\n    \r\n    [Parameter(Mandatory=$false)]\r\n    [switch]$Verbose\r\n)\r\n\r\nWrite-Host \"üöÄ ESM Platform Load Testing Suite\" -ForegroundColor Green\r\nWrite-Host \"=\" * 50 -ForegroundColor Gray\r\n\r\n# Set environment variables for the load test\r\n$env:LOAD_TEST_URL = $BaseUrl\r\n$env:MAX_CONCURRENT_USERS = $MaxUsers\r\n$env:TEST_DURATION = $Duration * 1000  # Convert to milliseconds\r\n$env:NODE_ENV = \"test\"\r\n\r\nif ($Verbose) {\r\n    $env:DEBUG = \"*\"\r\n}\r\n\r\n# Test configurations\r\n$TestConfigs = @{\r\n    \"smoke\" = @{\r\n        Users = 10\r\n        Duration = 30\r\n        Description = \"Smoke test with minimal load\"\r\n    }\r\n    \"ramp\" = @{\r\n        Users = 50\r\n        Duration = 120\r\n        Description = \"Gradual ramp-up test\"\r\n    }\r\n    \"stress\" = @{\r\n        Users = 500\r\n        Duration = 180\r\n        Description = \"Stress test beyond normal capacity\"\r\n    }\r\n    \"spike\" = @{\r\n        Users = 1000\r\n        Duration = 60\r\n        Description = \"Spike test with sudden load\"\r\n    }\r\n    \"full\" = @{\r\n        Users = $MaxUsers\r\n        Duration = $Duration\r\n        Description = \"Full capacity test\"\r\n    }\r\n}\r\n\r\nfunction Test-Prerequisites {\r\n    Write-Host \"üîç Checking prerequisites...\" -ForegroundColor Yellow\r\n    \r\n    # Check if Node.js is installed\r\n    try {\r\n        $nodeVersion = node --version\r\n        Write-Host \"‚úÖ Node.js version: $nodeVersion\" -ForegroundColor Green\r\n    }\r\n    catch {\r\n        Write-Host \"‚ùå Node.js is not installed or not in PATH\" -ForegroundColor Red\r\n        exit 1\r\n    }\r\n    \r\n    # Check if the target server is accessible\r\n    try {\r\n        $response = Invoke-WebRequest -Uri \"$BaseUrl/api/monitoring/health\" -Method HEAD -TimeoutSec 10 -ErrorAction SilentlyContinue\r\n        if ($response.StatusCode -eq 200) {\r\n            Write-Host \"‚úÖ Target server is accessible\" -ForegroundColor Green\r\n        } else {\r\n            Write-Host \"‚ö†Ô∏è Target server responded with status: $($response.StatusCode)\" -ForegroundColor Yellow\r\n        }\r\n    }\r\n    catch {\r\n        Write-Host \"‚ùå Cannot reach target server at $BaseUrl\" -ForegroundColor Red\r\n        Write-Host \"   Make sure the development server is running\" -ForegroundColor Red\r\n        exit 1\r\n    }\r\n}\r\n\r\nfunction Start-LoadTest {\r\n    param(\r\n        [string]$TestName,\r\n        [hashtable]$Config\r\n    )\r\n    \r\n    Write-Host \"\\nüìä Running $TestName test...\" -ForegroundColor Cyan\r\n    Write-Host \"   $($Config.Description)\" -ForegroundColor Gray\r\n    Write-Host \"   Users: $($Config.Users), Duration: $($Config.Duration)s\" -ForegroundColor Gray\r\n    \r\n    # Update environment variables for this test\r\n    $env:MAX_CONCURRENT_USERS = $Config.Users\r\n    $env:TEST_DURATION = $Config.Duration * 1000\r\n    \r\n    $startTime = Get-Date\r\n    \r\n    try {\r\n        # Run the Node.js load test script\r\n        $scriptPath = Join-Path $PSScriptRoot \"load-testing.js\"\r\n        $process = Start-Process -FilePath \"node\" -ArgumentList $scriptPath -Wait -PassThru -NoNewWindow\r\n        \r\n        $endTime = Get-Date\r\n        $duration = ($endTime - $startTime).TotalSeconds\r\n        \r\n        if ($process.ExitCode -eq 0) {\r\n            Write-Host \"‚úÖ $TestName test PASSED (${duration}s)\" -ForegroundColor Green\r\n            return $true\r\n        } else {\r\n            Write-Host \"‚ùå $TestName test FAILED (${duration}s)\" -ForegroundColor Red\r\n            return $false\r\n        }\r\n    }\r\n    catch {\r\n        Write-Host \"‚ùå Error running $TestName test: $($_.Exception.Message)\" -ForegroundColor Red\r\n        return $false\r\n    }\r\n}\r\n\r\nfunction Start-SystemMonitoring {\r\n    Write-Host \"üìà Starting system monitoring...\" -ForegroundColor Yellow\r\n    \r\n    $monitoringScript = {\r\n        while ($true) {\r\n            $timestamp = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"\r\n            \r\n            # Get CPU usage\r\n            $cpu = Get-Counter \"\\Processor(_Total)\\% Processor Time\" -SampleInterval 1 -MaxSamples 1\r\n            $cpuUsage = [math]::Round($cpu.CounterSamples[0].CookedValue, 2)\r\n            \r\n            # Get memory usage\r\n            $memory = Get-Counter \"\\Memory\\Available MBytes\" -SampleInterval 1 -MaxSamples 1\r\n            $availableMemory = [math]::Round($memory.CounterSamples[0].CookedValue, 0)\r\n            \r\n            # Get network usage (if possible)\r\n            try {\r\n                $network = Get-Counter \"\\Network Interface(*)\\Bytes Total/sec\" -SampleInterval 1 -MaxSamples 1 -ErrorAction SilentlyContinue\r\n                $networkTotal = ($network.CounterSamples | Measure-Object -Property CookedValue -Sum).Sum\r\n                $networkMbps = [math]::Round($networkTotal / 1MB * 8, 2)\r\n            } catch {\r\n                $networkMbps = 0\r\n            }\r\n            \r\n            Write-Host \"[$timestamp] CPU: ${cpuUsage}%, RAM Available: ${availableMemory}MB, Network: ${networkMbps}Mbps\" -ForegroundColor DarkGray\r\n            \r\n            Start-Sleep -Seconds 10\r\n        }\r\n    }\r\n    \r\n    return Start-Job -ScriptBlock $monitoringScript\r\n}\r\n\r\nfunction Stop-SystemMonitoring {\r\n    param([System.Management.Automation.Job]$MonitoringJob)\r\n    \r\n    if ($MonitoringJob) {\r\n        Stop-Job -Job $MonitoringJob\r\n        Remove-Job -Job $MonitoringJob\r\n        Write-Host \"üìà System monitoring stopped\" -ForegroundColor Yellow\r\n    }\r\n}\r\n\r\nfunction New-TestReport {\r\n    param(\r\n        [array]$Results\r\n    )\r\n    \r\n    $reportPath = Join-Path $PSScriptRoot \"../logs/load-test-summary-$(Get-Date -Format 'yyyyMMdd-HHmmss').txt\"\r\n    $logDir = Split-Path $reportPath -Parent\r\n    \r\n    if (-not (Test-Path $logDir)) {\r\n        New-Item -ItemType Directory -Path $logDir -Force | Out-Null\r\n    }\r\n    \r\n    $report = @()\r\n    $report += \"ESM Platform Load Test Summary\"\r\n    $report += \"=\" * 50\r\n    $report += \"Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')\"\r\n    $report += \"Target: $BaseUrl\"\r\n    $report += \"\"\r\n    \r\n    $passed = 0\r\n    $failed = 0\r\n    \r\n    foreach ($result in $Results) {\r\n        if ($result.Passed) {\r\n            $report += \"‚úÖ $($result.TestName): PASSED\"\r\n            $passed++\r\n        } else {\r\n            $report += \"‚ùå $($result.TestName): FAILED\"\r\n            $failed++\r\n        }\r\n    }\r\n    \r\n    $report += \"\"\r\n    $report += \"Summary: $passed passed, $failed failed\"\r\n    \r\n    $report | Out-File -FilePath $reportPath -Encoding UTF8\r\n    Write-Host \"üìÑ Test summary saved to: $reportPath\" -ForegroundColor Cyan\r\n    \r\n    return ($failed -eq 0)\r\n}\r\n\r\n# Main execution\r\ntry {\r\n    # Check prerequisites\r\n    Test-Prerequisites\r\n    \r\n    # Start system monitoring\r\n    $monitoringJob = Start-SystemMonitoring\r\n    \r\n    $results = @()\r\n    \r\n    if ($TestType -eq \"all\") {\r\n        # Run all test types except full\r\n        $testOrder = @(\"smoke\", \"ramp\", \"stress\", \"spike\")\r\n        \r\n        foreach ($testName in $testOrder) {\r\n            $config = $TestConfigs[$testName]\r\n            $passed = Start-LoadTest -TestName $testName -Config $config\r\n            $results += @{ TestName = $testName; Passed = $passed }\r\n            \r\n            # Brief pause between tests\r\n            if ($testName -ne $testOrder[-1]) {\r\n                Write-Host \"‚è≥ Waiting 30 seconds before next test...\" -ForegroundColor Gray\r\n                Start-Sleep -Seconds 30\r\n            }\r\n        }\r\n    } else {\r\n        # Run single test type\r\n        if ($TestConfigs.ContainsKey($TestType)) {\r\n            $config = $TestConfigs[$TestType]\r\n            $passed = Start-LoadTest -TestName $TestType -Config $config\r\n            $results += @{ TestName = $TestType; Passed = $passed }\r\n        } else {\r\n            Write-Host \"‚ùå Unknown test type: $TestType\" -ForegroundColor Red\r\n            Write-Host \"Available types: $($TestConfigs.Keys -join ', ')\" -ForegroundColor Gray\r\n            exit 1\r\n        }\r\n    }\r\n    \r\n    # Generate summary report\r\n    $allPassed = New-TestReport -Results $results\r\n    \r\n    Write-Host \"\\nüèÅ Load testing completed!\" -ForegroundColor Green\r\n    \r\n    if ($allPassed) {\r\n        Write-Host \"‚úÖ All tests PASSED\" -ForegroundColor Green\r\n        $exitCode = 0\r\n    } else {\r\n        Write-Host \"‚ùå Some tests FAILED\" -ForegroundColor Red\r\n        $exitCode = 1\r\n    }\r\n    \r\n} catch {\r\n    Write-Host \"‚ùå Fatal error: $($_.Exception.Message)\" -ForegroundColor Red\r\n    $exitCode = 1\r\n} finally {\r\n    # Clean up monitoring\r\n    if ($monitoringJob) {\r\n        Stop-SystemMonitoring -MonitoringJob $monitoringJob\r\n    }\r\n    \r\n    Write-Host \"\\nüßπ Cleanup completed\" -ForegroundColor Gray\r\n}\r\n\r\nexit $exitCode"