# Docker Compose Production Configuration
# Optimized for production deployment with high availability and security

version: '3.8'

networks:
  esm_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  # Separate network for database (enhanced security)
  database_network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/esm/postgres
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/esm/redis
      o: bind
  backup_data:
    driver: local
    driver_opts:
      type: none
      device: /var/backups/esm
      o: bind
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      device: /var/log/esm/nginx
      o: bind
  ssl_certs:
    driver: local
    driver_opts:
      type: none
      device: /etc/ssl/esm
      o: bind

services:
  # PostgreSQL - Production Configuration
  postgres:
    image: postgres:17.6-alpine
    container_name: esm_postgres_prod
    restart: unless-stopped
    networks:
      - database_network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - backup_data:/backup
    # No external port exposure for security
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=8MB
      -c min_wal_size=2GB
      -c max_wal_size=8GB
      -c max_worker_processes=4
      -c max_parallel_workers_per_gather=2
      -c max_parallel_workers=4
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on

  # Redis - Production Configuration
  redis:
    image: redis:7.2-alpine
    container_name: esm_redis_prod
    restart: unless-stopped
    networks:
      - esm_network
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    # No external port exposure
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Application - Multiple Instances for High Availability
  app:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME}:${IMAGE_TAG:-latest}
    restart: unless-stopped
    networks:
      - esm_network
      - database_network
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      PORT: 3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # No external port exposure (accessed via nginx)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache
    deploy:
      replicas: 3  # High availability with 3 instances
      resources:
        limits:
          memory: 1G
          cpus: '0.75'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first

  # Nginx - Production Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: esm_nginx_prod
    restart: unless-stopped
    networks:
      - esm_network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default-prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ssl_certs:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Database Backup Service - Production Schedule
  db_backup:
    image: postgres:17.6-alpine
    container_name: esm_db_backup_prod
    restart: "no"
    networks:
      - database_network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_RETENTION_DAYS: 90
      BACKUP_S3_BUCKET: ${BACKUP_S3_BUCKET}
      BACKUP_S3_REGION: ${BACKUP_S3_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - backup_data:/backup
      - ./docker/scripts:/scripts:ro
    depends_on:
      postgres:
        condition: service_healthy
    command: /scripts/backup.sh
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Monitoring and Health Check Service
  healthcheck:
    image: alpine:3.19
    container_name: esm_healthcheck_prod
    restart: unless-stopped
    networks:
      - esm_network
      - database_network
    volumes:
      - ./docker/scripts:/scripts:ro
      - nginx_logs:/logs/nginx:ro
    environment:
      CHECK_INTERVAL: 300  # 5 minutes
      ALERT_THRESHOLD: 3
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
    command: /scripts/healthcheck.sh
    depends_on:
      - app
      - postgres
      - redis
      - nginx
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

  # Log Aggregation (Optional)
  logrotate:
    image: alpine:3.19
    container_name: esm_logrotate_prod
    restart: unless-stopped
    volumes:
      - nginx_logs:/var/log/nginx
      - ./docker/logrotate.conf:/etc/logrotate.conf:ro
    command: >
      sh -c "
        apk add --no-cache logrotate &&
        while true; do
          logrotate /etc/logrotate.conf
          sleep 3600
        done
      "
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 32M
          cpus: '0.05'