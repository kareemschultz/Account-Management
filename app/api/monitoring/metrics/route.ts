/**
 * ESM Platform - Performance Metrics API Endpoint
 * Real-time performance data for monitoring dashboard
 */

import { NextRequest, NextResponse } from 'next/server';\nimport { systemMetrics } from '@/lib/monitoring';\nimport { optimizedAPIResponse } from '@/lib/api-optimization';\n\nexport async function GET(request: NextRequest) {\n  return optimizedAPIResponse(\n    request,\n    async () => {\n      const { searchParams } = new URL(request.url);\n      const count = Math.min(parseInt(searchParams.get('count') || '100'), 1000);\n      const latest = searchParams.get('latest') === 'true';\n      \n      if (latest) {\n        const latestMetrics = systemMetrics.getLatestMetrics();\n        return {\n          metrics: latestMetrics,\n          timestamp: new Date().toISOString()\n        };\n      }\n      \n      const metricsHistory = systemMetrics.getMetricsHistory(count);\n      \n      return {\n        metrics: metricsHistory,\n        count: metricsHistory.length,\n        timestamp: new Date().toISOString()\n      };\n    },\n    {\n      cache: false, // Metrics should be real-time\n      rateLimitType: 'general',\n      includeMetrics: false // Avoid recursion\n    }\n  );\n}\n\nexport async function POST(request: NextRequest) {\n  return optimizedAPIResponse(\n    request,\n    async () => {\n      // Force metrics collection\n      const metrics = await systemMetrics.collectMetrics();\n      \n      return {\n        message: 'Metrics collected successfully',\n        metrics,\n        timestamp: new Date().toISOString()\n      };\n    },\n    {\n      cache: false,\n      rateLimitType: 'general'\n    }\n  );\n}"