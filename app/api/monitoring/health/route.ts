/**
 * ESM Platform - Health Check API Endpoint
 * Real-time system health monitoring for 300+ concurrent users
 */

import { NextRequest, NextResponse } from 'next/server';\nimport { performHealthCheck } from '@/lib/monitoring';\nimport { optimizedAPIResponse } from '@/lib/api-optimization';\n\nexport async function GET(request: NextRequest) {\n  return optimizedAPIResponse(\n    request,\n    async () => {\n      const healthCheck = await performHealthCheck();\n      \n      return {\n        ...healthCheck,\n        meta: {\n          endpoint: '/api/monitoring/health',\n          timestamp: new Date().toISOString(),\n          requestId: crypto.randomUUID()\n        }\n      };\n    },\n    {\n      cache: false, // Health checks should be real-time\n      rateLimitType: 'general',\n      includeMetrics: true\n    }\n  );\n}\n\n// Simple health check for load balancers\nexport async function HEAD(request: NextRequest) {\n  try {\n    const healthCheck = await performHealthCheck();\n    \n    const status = healthCheck.status === 'healthy' || healthCheck.status === 'warning' ? 200 : 503;\n    \n    return new NextResponse(null, {\n      status,\n      headers: {\n        'X-Health-Status': healthCheck.status,\n        'X-Database-Status': healthCheck.checks.database.status,\n        'X-Memory-Usage': `${Math.round(healthCheck.checks.memory.percentage * 100)}%`,\n        'X-Response-Time': `${healthCheck.checks.api.responseTime}ms`,\n        'Cache-Control': 'no-cache, no-store, must-revalidate'\n      }\n    });\n  } catch (error) {\n    return new NextResponse(null, {\n      status: 503,\n      headers: {\n        'X-Health-Status': 'error',\n        'X-Error': 'Health check failed'\n      }\n    });\n  }\n}"